name: ci

on: [push, pull_request]

jobs:
  build:
    name: build / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu-18.04
          - windows-2019
          - macos-10.15

    env:
      CARGO_INCREMENTAL: 0
      RUST_BACKTRACE: full
      CARGO_TERM_COLOR: always

    outputs:
      type: ${{ steps.release.outputs.type }}
      ref: ${{ steps.release.outputs.ref }}

    steps:
      - name: Configure git
        run: git config --global core.symlinks true

      - name: Clone repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 5
          submodules: true

      - name: Get release info
        id: release
        run: |
          echo "::set-output name=type::${{ github.ref == 'refs/heads/master' && 'canary' || startsWith(github.ref, 'refs/tags/') && 'release' }}"
          echo "::set-output name=ref::$(echo ${{ github.ref == 'refs/heads/master' && '$(git rev-parse HEAD)' || startsWith(github.ref, 'refs/tags/') && '${GITHUB_REF#refs/*/}' }})"

      - name: Create source tarball
        if: runner.os == 'Linux'
        run: |
          mkdir -p target/release
          tar --exclude=.cargo_home --exclude=".git*" --exclude=target --exclude=third_party/prebuilt -czf target/release/deno_src.tar.gz -C .. deno

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          default: true
          override: true
          toolchain: 1.50.0

      - name: Configure canary build
        if: github.repository == 'denoland/deno' && steps.release.outputs.type == 'canary'
        shell: bash
        run: echo 'DENO_CANARY=true' >> $GITHUB_ENV

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: false
          command: build
          args: --locked --all-targets --release

      - name: Prep linux release
        if: runner.os == 'Linux'
        working-directory: target/release
        run: |
          zip -r deno-x86_64-unknown-linux-gnu.zip deno
          zip -r denort-x86_64-unknown-linux-gnu.zip denort
          ./deno types > lib.deno.d.ts

      - name: Prep mac release
        if: runner.os == 'macOS'
        working-directory: target/release
        run: |
          zip -r deno-x86_64-apple-darwin.zip deno
          zip -r denort-x86_64-apple-darwin.zip denort

      - name: Prep windows release
        if: runner.os == 'Windows'
        working-directory: target/release
        run: |
          Compress-Archive -CompressionLevel Optimal -Force -Path deno.exe -DestinationPath deno-x86_64-pc-windows-msvc.zip
          Compress-Archive -CompressionLevel Optimal -Force -Path denort.exe -DestinationPath denort-x86_64-pc-windows-msvc.zip

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: |
            target/release/deno-x86_64-unknown-linux-gnu.zip
            target/release/deno-x86_64-pc-windows-msvc.zip
            target/release/deno-x86_64-apple-darwin.zip
            target/release/denort-x86_64-unknown-linux-gnu.zip
            target/release/denort-x86_64-pc-windows-msvc.zip
            target/release/denort-x86_64-apple-darwin.zip
            target/release/deno_src.tar.gz
            target/release/lib.deno.d.ts
          retention-days: 7

  release:
    if: github.repository == 'denoland/deno' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/'))
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: denoland
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Upload Builds
        run: |
          gsutil cp ./artifacts/*.zip gs://dl.deno.land/${{ needs.build.outputs.type }}/${{ needs.build.outputs.ref }}/
          echo ${{ needs.build.outputs.ref }} > ${{ needs.build.outputs.type }}-latest.txt
          gsutil cp ${{ needs.build.outputs.type }}-latest.txt gs://dl.deno.land/${{ needs.build.outputs.type }}-latest.txt

      - name: Upload release to GitHub
        uses: softprops/action-gh-release@v1
        if: needs.build.outputs.type == 'release'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            artifacts/deno-x86_64-unknown-linux-gnu.zip
            artifacts/deno-x86_64-pc-windows-msvc.zip
            artifacts/deno-x86_64-apple-darwin.zip
            artifacts/lib.deno.d.ts
            artifacts/deno_src.tar.gz
          draft: true

  test:
    name: test / ${{ matrix.kind }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        kind: ["debug", "release"]
        os:
          - ubuntu-18.04
          - windows-2019
          - macos-10.15
        exclude:
          - kind: debug
            os: windows-2019
          - kind: debug
            os: macos-10.15

    env:
      CARGO_INCREMENTAL: 0
      RUST_BACKTRACE: full
      CARGO_TERM_COLOR: always

    steps:
      - name: Configure git
        run: git config --global core.symlinks true

      - name: Clone repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 5
          submodules: true

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          default: true
          override: true
          toolchain: 1.50.0

      - name: Install Deno
        run: |
          curl -fsSL https://deno.land/x/install/install.sh | sh -s v1.7.2
          echo "$HOME/.deno/bin" >> $${{ runner.os == 'Windows' && 'env:' || '' }}GITHUB_PATH

      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: "3.8"
          architecture: x64

      - name: Install Node
        uses: actions/setup-node@v2
        with:
          node-version: "14"
          check-latest: true

      - name: Remove unused Python
        if: runner.os == 'Windows'
        run: |-
          $env:PATH -split ";" |
            Where-Object { Test-Path "$_\python.exe" } |
            Select-Object -Skip 1 |
            ForEach-Object { Move-Item "$_" "$_.disabled" }

      - name: Log versions
        run: |
          node -v
          python --version
          rustc --version
          cargo --version
          deno --version

      - name: Build (${{ matrix.kind }})
        uses: actions-rs/cargo@v1
        with:
          use-cross: false
          command: build
          args: --locked --all-targets ${{ matrix.kind == 'release' && '--release -vv' || '' }}

      - name: Test release
        if: matrix.kind == 'release'
        run: cargo test --release --locked --all-targets

      - name: Test debug
        if: matrix.kind == 'debug'
        run: |
          cargo test --locked --doc
          cargo test --locked --all-targets

      - name: Configure hosts file for WPT (unix)
        if: runner.os != 'Windows'
        working-directory: test_util/wpt/
        run: ./wpt make-hosts-file | sudo tee -a /etc/hosts

      - name: Configure hosts file for WPT (windows)
        if: runner.os == 'Windows'
        working-directory: test_util/wpt/
        run: python wpt make-hosts-file | Out-File $env:SystemRoot\System32\drivers\etc\hosts -Encoding ascii -Append

      - name: Run web platform tests (${{ matrix.kind }})
        run: |
          deno run --unstable --allow-write --allow-read --allow-net --allow-env --allow-run ./tools/wpt.ts setup
          deno run --unstable --allow-write --allow-read --allow-net --allow-env --allow-run ./tools/wpt.ts run --quiet ${{ matrix.kind == 'release' && '--release' || '' }}

  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    env:
      CARGO_TERM_COLOR: always

    steps:
      - name: Configure git
        run: git config --global core.symlinks true

      - name: Clone repository
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.50.0
          default: true
          override: true
          components: rustfmt, clippy

      - name: Install Deno
        run: |
          curl -fsSL https://deno.land/x/install/install.sh | sh -s v1.7.2
          echo "$HOME/.deno/bin" >> $${{ runner.os == 'Windows' && 'env:' || '' }}GITHUB_PATH

      - name: Log versions
        run: |
          rustc --version
          cargo --version
          deno --version

      - name: lint.js
        run: deno run --unstable --allow-write --allow-read --allow-run ./tools/lint.js

      - name: test_format.js
        run: deno run --unstable --allow-write --allow-read --allow-run ./tools/format.js --check

  bench:
    runs-on: ${{ github.repository == 'denoland/deno' && 'ubuntu-latest-xl' || 'ubuntu-latest' }}
    timeout-minutes: 60

    env:
      CARGO_TERM_COLOR: always

    steps:
      - name: Configure git
        run: git config --global core.symlinks true

      - name: Clone repository
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          default: true
          override: true
          toolchain: 1.50.0

      - name: Install Deno
        run: |
          curl -fsSL https://deno.land/x/install/install.sh | sh -s v1.7.2
          echo "$HOME/.deno/bin" >> $${{ runner.os == 'Windows' && 'env:' || '' }}GITHUB_PATH

      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: "3.8"
          architecture: x64

      - name: Install Node
        uses: actions/setup-node@v2
        with:
          node-version: "14"
          check-latest: true

      - name: Log versions
        run: |
          node -v
          python --version
          rustc --version
          cargo --version
          deno --version

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: false
          command: build
          args: --locked --all-targets --release -vv

      - name: Configure hosts file for WPT
        if: runner.os != 'Windows'
        working-directory: test_util/wpt/
        run: ./wpt make-hosts-file | sudo tee -a /etc/hosts

      - name: Run Benchmarks
        uses: actions-rs/cargo@v1
        with:
          use-cross: false
          command: bench

      - name: Post Benchmarks
        if: github.repository == 'denoland/deno' && github.ref == 'refs/heads/master'
        env:
          DENOBOT_PAT: ${{ secrets.DENOBOT_PAT }}
        run: |
          git clone --depth 1 -b gh-pages https://${DENOBOT_PAT}@github.com/denoland/benchmark_data.git gh-pages
          deno run --unstable -A ./tools/build_benchmark_jsons.js --release
          cd gh-pages
          git config user.email "propelml@gmail.com"
          git config user.name "denobot"
          git add .
          git commit --message "Update benchmarks"
          git push origin gh-pages

      - name: Worker info
        run: |
          cat /proc/cpuinfo
          cat /proc/meminfo
